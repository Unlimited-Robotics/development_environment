#!/usr/bin/python3
import argparse

from robotdevenv.component import RobotDevComponent as Component
from robotdevenv.robot import RobotDevRobot as Robot
from robotdevenv.sync import RobotDevSyncHandler as SyncHandler
from robotdevenv.run import RobotDevRunHandler as RunHandler
from robotdevenv.managed_main_execution import managed_main_execution


class RobotDevRunError(Exception): pass


def run_command():

    parser = argparse.ArgumentParser()
    robot = Robot(parser)
    component = Component(parser, robot)
    sync_handler = SyncHandler(component, robot)
    run_handler = RunHandler(component, robot)

    print()
    print('ðŸ¤–ðŸ¤– UR ROBOT DEVELOPMENT ENVIRONMENT ðŸ¤–ðŸ¤–')
    print(f'  ðŸ¦¾ Run command ðŸ¦¿')
    print()
    print(f'ðŸ“¦ðŸ“¦  Component: {component.full_name}')
    print(f'ðŸ¤–ðŸ¤–      Robot: {robot.name}')
    print()

    parser.add_argument('-d', '--detach', action='store_true')
    parser.add_argument('-s', '--sync', action='store_true')
    parser.add_argument('--config', type=str)
    args = dict(parser.parse_known_args()[0]._get_kwargs())
    arg_detach = args['detach']

    command_args = parser.parse_known_args()[1]
    if command_args:
        command = ' '.join(command_args)
    else:
        command = ''

    if command:
        print(f'ðŸ¦¿  Command to run: \'{command}\'')
        print()

    if args['sync'] and not robot.is_local:
        sync_handler.sync_to_robot()

    run_handler.run_command(
        command=command, 
        interactive=True,
        config_origin=args['config'],
    )


if __name__ == "__main__":
    managed_main_execution(run_command)
