#!/usr/bin/python3

import shutil
import argparse

from bash import run_bash_command
from constants import *


# Arguments
parser = argparse.ArgumentParser()
parser.add_argument('--packages-list', nargs='+', type=str)
parser.add_argument('--packages-to-build', nargs='+', type=str)
parser.add_argument('--debug', action='store_true')
args = parser.parse_args()

# Create folders if they don't exist
DIR_ROS_BUILD.mkdir(parents=True, exist_ok=True)
DIR_ROS_INSTALL.mkdir(parents=True, exist_ok=True)

# Remove not needed packages builds
for subdirectorio in DIR_ROS_BUILD.iterdir():
    if subdirectorio.is_dir() and \
            subdirectorio.name not in args.packages_list:
        shutil.rmtree(subdirectorio)
for subdirectorio in DIR_ROS_INSTALL.iterdir():
    if subdirectorio.is_dir() and \
            subdirectorio.name not in args.packages_list:
        shutil.rmtree(subdirectorio)

# Remove old build log
shutil.rmtree(DIR_ROS_LOG, ignore_errors=True)
DIR_ROS_LOG.mkdir(parents=True, exist_ok=True)

# Run colcon build
build_command = (
    'colcon build'
    f'  --base-paths {DIR_ROS_SRC} '
    f'  --build-base {DIR_ROS_BUILD} '
    f'  --install-base {DIR_ROS_INSTALL} '
)

if args.debug:
    build_command += f'  --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo'

if args.packages_to_build:
    build_command += f'  --packages-select {" ".join(args.packages_to_build)} '
else:
    build_command += f'  --packages-select {" ".join(args.packages_list)} '

# build_command += '--allow-overriding launch launch_ros rclpy ros2run depth_image_proc '

# print(build_command)

run_bash_command(
    command=build_command,
    bash=True,
    env={
        'COLCON_LOG_PATH': str(DIR_ROS_LOG),
        'COLCON_EXTENSION_BLOCKLIST': 'colcon_core.event_handler.desktop_notification',
    },
    ignore_command_error=True
)
