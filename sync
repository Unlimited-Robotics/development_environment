#!/usr/bin/python3
import argparse

from robotdevenv.component import RobotDevComponent as Component
from robotdevenv.robot import RobotDevRobot as Robot
from robotdevenv.sync import RobotDevSyncHandler as SyncHandler


class RobotDevSyncError(Exception): pass


def sync_component():
    
    parser = argparse.ArgumentParser()
    robot = Robot(parser)
    component = Component(parser, robot)
    
    print()
    print('ðŸ¤–ðŸ¤– UR ROBOT DEVELOPMENT ENVIRONMENT ðŸ¤–ðŸ¤–')
    print('  ðŸ¦¾ Sync Environment ðŸ¦¿')
    print()
    print(f'ðŸ“¦ðŸ“¦  Component: {component.full_name}')
    print(f'ðŸ¤–ðŸ¤–      Robot: {robot.name}')
    print()

    if robot.is_local:
        raise RobotDevSyncError('Robot is localhost, nothing to synchronize.')

    SyncHandler.sync_to_robot(component, robot)
    


def sync_all_components():
    profile, config, _ = get_dev_profile()
    env = get_environment()

    check_workspace(config)

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--component', type=str, required=False)
    args = dict(parser.parse_known_args()[0]._get_kwargs())
    arg_component = args['component']

    known_component = False
    
    for component in profile.components:
        if arg_component is None or arg_component==component.component:
            print(f'ðŸ“¦ðŸ“¦  Component: {component.component}')
            print()
            sync_component(config, env, component)
            known_component = True
    
    if not known_component:
        raise RobotDevSyncError(
                f'Unknown component \'{arg_component}\''
            )



if __name__ == "__main__":
    sync_component()
